#!/usr/bin/perl
# submerge; see README.md for usage instructions

use strict;
use warnings;

use lib 'lib';

use Mojolicious::Lite;
use Submerge::YouTubeFeed;
use YAML;

# config is in production.yaml or development.yaml
my $config_file = app->mode . ".yaml";
die "Can't read from submerge config file ($config_file), start by copying the default development.yaml\n"
    unless -r $config_file;
my $config = YAML::LoadFile($config_file);

die "base_url is missing from submerge config file ($config_file)"
    unless defined $config->{base_url};

hook before_render => sub {
    my ($c) = @_;
    $c->stash(config => $config);
};

# URLs like /feeds/videos.xml?channel_id=UCzr30osBdTmuFUS8IfXtXmg
# We're just copying the YouTube URL format
get '/feeds/videos.xml' => sub {
    my ($c) = @_;

    my @channels = split /,/, scalar $c->param('channel_id');

    my @feeds;
    my $nfeeds = 0;
    my $add_feed = sub {
        my ($feed) = @_;

        $nfeeds++;
        push @feeds, $feed if $feed;

        if ($nfeeds == @channels) {
            # splice all of the feeds into one
            # TODO: re-order the feed so it's always sorted by date
            for my $i (1 .. $nfeeds-1) {
                $feeds[0]->splice($feeds[$i]);
            }

            $feeds[0]->title('Submerge videos');
            $feeds[0]->generator("Submerge at $config->{base_url}/");

            # TODO: rewrite link rel="self"? worked like this before refactor:
            #   my $this_url = $c->req->url;
            #   $body =~ s/<link rel=\"self\" href=\"[^"]*\"\/>/<link rel="self" href="$config->{base_url}$this_url"\/>/g;

            $c->res->headers->content_type("application/rss+xml");
            return $c->render(data => $feeds[0]->as_xml);
        }
    };

    for my $channel_id (@channels) {
        Submerge::YouTubeFeed->get_feed($channel_id, sub {
            my ($feed) = @_;
            $add_feed->($feed);
        });
    }
};

get '/' => sub {
    my ($c) = @_;

    if ($config->{public}) {
        return $c->render('public_index');
    } else {
        return $c->render('private_index');
    }
};

get '/submerge' => sub { shift->redirect_to('/'); };

sub add_channel {
    my ($c, $channel_id) = @_;

    $c->session(channels => []) if !$c->session('channels');

    # do nothing if already subscribed to this channel
    return if grep { $_->{channel_id} eq $channel_id } @{ $c->session('channels') };

    push @{ $c->session('channels') }, {
        name => 'Unknown Channel',
        thumbnail => 'Unknown Thumbnail',
        channel_id => $channel_id,
    };
}

post '/subscribe' => sub {
    my ($c) = @_;

    Submerge::YouTubeFeed->get_channel_id(scalar $c->param('url'), sub {
        my ($channel_ids, $error) = @_;

        if ($error) {
            return $c->render(json => {error => $error});
        } else {
            # TODO: check that the generated rss feeds look sound (even if there are no videos) before giving it to the user
            add_channel($c, $_) for @$channel_ids;
            return $c->render(json => $c->session('channels'));
        }
    });
};

post '/clear-subs' => sub {
    my ($c) = @_;
    $c->session(channels => undef);
    return $c->render(json => []);
};

get '/subs' => sub {
    my ($c) = @_;
    return $c->render(json => $c->session('channels'));
};

app->config($config->{mojo_config});
app->start;
