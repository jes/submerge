#!/usr/bin/perl
# submerge; see README.md for usage instructions

use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::UserAgent;
use Mojo::Util qw(url_escape);
use XML::Feed;
use YAML;

# config is in production.yaml or development.yaml
my $config_file = app->mode . ".yaml";
die "Can't read from submerge config file ($config_file), start by copying the default development.yaml\n"
    unless -r $config_file;
my $config = YAML::LoadFile($config_file);

die "base_url is missing from submerge config file ($config_file)"
    unless defined $config->{base_url};

my $ua = Mojo::UserAgent->new();
$ua->max_redirects(3); # follow redirects

hook before_render => sub {
    my ($c) = @_;
    $c->stash(config => $config);
};

# URLs like /feeds/videos.xml?channel_id=UCzr30osBdTmuFUS8IfXtXmg
# We're just copying the YouTube URL format
get '/feeds/videos.xml' => sub {
    my ($c) = @_;

    my @channels = split /,/, scalar $c->param('channel_id');

    my @feeds;
    my $nfeeds = 0;
    my $add_feed = sub {
        my ($feed) = @_;

        $nfeeds++;
        push @feeds, $feed if $feed;

        if ($nfeeds == @channels) {
            # splice all of the feeds into one
            # TODO: re-order the feed so it's always sorted by date
            for my $i (1 .. $nfeeds-1) {
                $feeds[0]->splice($feeds[$i]);
            }

            $feeds[0]->title('Submerge videos');
            $feeds[0]->generator("Submerge at $config->{base_url}/");

            $c->res->headers->content_type("application/rss+xml");
            return $c->render(data => $feeds[0]->as_xml);
        }
    };

    for my $channel_id (@channels) {
        $ua->get('https://www.youtube.com/feeds/videos.xml?channel_id=' . url_escape($channel_id) => sub {
            my ($ua, $tx) = @_;
            my $body = $tx->res->body;

            # processing xml with regex ftw
            $body =~ s/youtube\.com/hooktube.com/g;
            my $this_url = $c->req->url;
            $body =~ s/<link rel=\"self\" href=\"[^"]*\"\/>/<link rel="self" href="$config->{base_url}$this_url"\/>/g;

            # TODO: replace URLs like https://i3.ytimg.com/vi/nD_6YEXFJ1c/hqdefault.jpg with something that we proxy
            # so as not to leak IP addresses to Google when people view thumbnails (#4)

            $add_feed->(XML::Feed->parse(\$body));
        });
    }
};

get '/' => sub {
    my ($c) = @_;

    if ($config->{public}) {
        return $c->render('public_index');
    } else {
        return $c->render('private_index');
    }
};

get '/submerge' => sub { shift->redirect_to('/'); };

sub add_channel {
    my ($c, $channel_id) = @_;

    $c->session(channels => []) if !$c->session('channels');

    # do nothing if already subscribed to this channel
    return if grep { $_->{channel_id} eq $channel_id } @{ $c->session('channels') };

    push @{ $c->session('channels') }, {
        name => 'Unknown Channel',
        thumbnail => 'Unknown Thumbnail',
        channel_id => $channel_id,
    };
}

post '/subscribe' => sub {
    my ($c) = @_;

    my $url = scalar $c->param('url');
    $url =~ s/^\s*//;
    $url =~ s/\s*$//;

    # TODO: in all cases, check that the generated rss feed looks sound (even if there are no videos) before giving it to the user

    # channel url - just extract the channel id from the url
    if ($url =~ m{^https?://(?:www\.)?(?:youtube|hooktube)\.com/channel/([^/]*)/?$}i) {
        add_channel($c, $1);
        return $c->render(json => $c->session('channels'));
    }

    # feed url (either submerge or youtube) - just extract the channel ids from the url
    if ($url =~ m{/feeds/videos\.xml\?channel_id=(.*)$}i) {
        add_channel($c, $_) for split /,/, $1;
        return $c->render(json => $c->session('channels'));
    }

    # user page url - fetch the page and extract the channel id from the "canonical" url
    if ($url =~ m{^https?://(?:www\.)?(?:youtube|hooktube)\.com/user/([^/]*)/?$}i) {
        # make sure to fetch from youtube.com to learn the "canonical" url
        $url =~ s/hooktube\.com/youtube.com/gi;
        $ua->get($url => sub {
            my ($ua, $tx) = @_;

            if ($tx->res->body =~ m{<link rel="canonical" href="https?://(?:www\.)?youtube\.com/channel/([^/"]*)/?"}i) {
                add_channel($c, $1);
                return $c->render(json => $c->session('channels'));
            } else {
                return $c->render(text => "Error - couldn't find canonical URL in channel page");
            }
        });
        return;
    }

    # video url
    if ($url =~ m{^https?://(?:www\.)?(?:youtube|hooktube)\.com/watch}i) {
        # make sure to fetch from youtube.com to learn the channel id
        $url =~ s/hooktube\.com/youtube.com/gi;
        $ua->get($url => sub {
            my ($ua, $tx) = @_;

            if ($tx->res->body =~ m{<meta itemprop="channelId" content="([^"]*)">}) {
                add_channel($c, $1);
                return $c->render(json => $c->session('channels'));
            } else {
                return $c->render(text => "Error - couldn't find channel ID in video page");
            }
        });
        return;
    }

    return $c->render(text => "Error - don't recognise the input url");
};

post '/clear-subs' => sub {
    my ($c) = @_;
    $c->session(channels => undef);
    return $c->render(json => []);
};

get '/subs' => sub {
    my ($c) = @_;
    return $c->render(json => $c->session('channels'));
};

app->config($config->{mojo_config});
app->start;
